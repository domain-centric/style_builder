import 'package:flutter/material.dart' as i1;
import 'package:flutter/painting.dart' as i2;
import 'dart:ui' as i3;
import 'package:example/my_widget.dart' as i4;
import 'package:lerp/lerp.dart' as i5;

/// This class is generated by the style_builder package. Do not edit manually.
/// Source class : MyWidgetDefault
/// To update run: dart run build_runner build --delete-conflicting-output
/// For more info: https://pub.dev/packages/style_builder
class MyWidgetStyle extends i1.ThemeExtension<MyWidgetStyle> {
  final int? borderRadius;
  final double? elevation;
  final i2.EdgeInsets? padding;
  final i3.Color? surface;
  final i3.Color? shadow;
  final i2.TextStyle? textStyle;
  static const i4.MyWidgetDefault defaults = i4.MyWidgetDefault();
  const MyWidgetStyle({
    this.borderRadius,
    this.elevation,
    this.padding,
    this.surface,
    this.shadow,
    this.textStyle,
  });

  /// Resolves the MyWidgetStyle within the current context / theme
  /// and returns a record with non nullable values.
  /// The values are resolved in the following order:
  /// 1. The value from the provided style (e.g. a constructor parameter of a widget)
  /// 2. The value from the theme extension
  /// 3. The default value from the annotated class
  static ({
    int borderRadius,
    double elevation,
    i2.EdgeInsets padding,
    i3.Color surface,
    i3.Color shadow,
    i2.TextStyle textStyle,
  })
  resolve(i1.BuildContext context, [MyWidgetStyle? style]) {
    var theme = i1.Theme.of(context).extension<MyWidgetStyle>();
    return (
      borderRadius:
          style?.borderRadius ?? theme?.borderRadius ?? defaults.borderRadius,
      elevation: style?.elevation ?? theme?.elevation ?? defaults.elevation,
      padding: style?.padding ?? theme?.padding ?? defaults.padding(),
      surface: style?.surface ?? theme?.surface ?? defaults.surface(context),
      shadow: style?.shadow ?? theme?.shadow ?? defaults.shadow(context),
      textStyle:
          style?.textStyle ?? theme?.textStyle ?? defaults.textStyle(context),
    );
  }

  /// Creates a copy of this MyWidgetStyle with the current values
  /// replaced by given none-null parameter values.
  @override
  MyWidgetStyle copyWith({
    int? borderRadius,
    double? elevation,
    i2.EdgeInsets? padding,
    i3.Color? surface,
    i3.Color? shadow,
    i2.TextStyle? textStyle,
  }) => MyWidgetStyle(
    borderRadius: borderRadius ?? this.borderRadius,
    elevation: elevation ?? this.elevation,
    padding: padding ?? this.padding,
    surface: surface ?? this.surface,
    shadow: shadow ?? this.shadow,
    textStyle: textStyle ?? this.textStyle,
  );

  /// Linearly interpolate with another [ThemeExtension] object.
  /// The following types are supported:
  /// * bool
  /// * Enum
  /// * int
  /// * double
  /// * all classes with a correct static lerp method, e.g. Color.lerp(a,b,t)
  @override
  i1.ThemeExtension<MyWidgetStyle> lerp(MyWidgetStyle? other, double t) =>
      other == null
          ? this
          : MyWidgetStyle(
            borderRadius: i5.lerpInt(borderRadius, other.borderRadius, t),
            elevation: i3.lerpDouble(elevation, other.elevation, t),
            padding: i2.EdgeInsets.lerp(padding, other.padding, t),
            surface: i3.Color.lerp(surface, other.surface, t),
            shadow: i3.Color.lerp(shadow, other.shadow, t),
            textStyle: i2.TextStyle.lerp(textStyle, other.textStyle, t),
          );
}
