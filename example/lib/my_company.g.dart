import 'package:flutter/material.dart' as i1;
import 'dart:ui' as i2;
import 'package:example/my_company.dart' as i3;

/// This class is generated by the style_builder package. Do not edit manually.
/// Source class : MyCompanyDefault
/// To update run: dart run build_runner build --delete-conflicting-output
/// For more info: https://pub.dev/packages/style_builder
class MyCompanyStyle extends i1.ThemeExtension<MyCompanyStyle> {
  final i2.Color? primary;
  final i2.Color? secondary;
  final i2.Color? tertiary;
  static const i3.MyCompanyDefault defaults = i3.MyCompanyDefault();
  const MyCompanyStyle({this.primary, this.secondary, this.tertiary});

  /// Resolves the MyCompanyStyle within the current context / theme
  /// and returns a record with non nullable values.
  /// The values are resolved in the following order:
  /// 1. The value from the provided style (e.g. a constructor parameter of a widget)
  /// 2. The value from the theme extension
  /// 3. The default value from the annotated class
  static ({i2.Color primary, i2.Color secondary, i2.Color tertiary}) resolve(
    i1.BuildContext context, [
    MyCompanyStyle? style,
  ]) {
    var theme = i1.Theme.of(context).extension<MyCompanyStyle>();
    return (
      primary: style?.primary ?? theme?.primary ?? defaults.primary,
      secondary: style?.secondary ?? theme?.secondary ?? defaults.secondary,
      tertiary: style?.tertiary ?? theme?.tertiary ?? defaults.tertiary,
    );
  }

  /// Creates a copy of this MyCompanyStyle with the current values
  /// replaced by given none-null parameter values.
  @override
  MyCompanyStyle copyWith({
    i2.Color? primary,
    i2.Color? secondary,
    i2.Color? tertiary,
  }) => MyCompanyStyle(
    primary: primary ?? this.primary,
    secondary: secondary ?? this.secondary,
    tertiary: tertiary ?? this.tertiary,
  );

  /// Linearly interpolate with another [ThemeExtension] object.
  /// The following types are supported:
  /// * bool
  /// * Enum
  /// * int
  /// * double
  /// * all classes with a correct static lerp method, e.g. Color.lerp(a,b,t)
  @override
  i1.ThemeExtension<MyCompanyStyle> lerp(MyCompanyStyle? other, double t) =>
      other == null
          ? this
          : MyCompanyStyle(
            primary: i2.Color.lerp(primary, other.primary, t),
            secondary: i2.Color.lerp(secondary, other.secondary, t),
            tertiary: i2.Color.lerp(tertiary, other.tertiary, t),
          );
  @override
  String toString() {
    final values = <String>[
      if (primary != null) 'primary: $primary',
      if (secondary != null) 'secondary: $secondary',
      if (tertiary != null) 'tertiary: $tertiary',
    ];
    return "MyCompanyStyle(${values.join(', ')})";
  }

  @override
  int get hashCode => Object.hash(primary, secondary, tertiary);
}
